using ARM_Engineer.Database;
using ARM_Engineer.Employee;
using Npgsql;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace ARM_Engineer.Technic
{
    /// <summary>
    /// Interaction logic for Technic_Window.xaml
    /// </summary>
    public partial class ObjectExploitationAddWindow : Window
    {
        string openMode;
        Technic model;
        public ObjectExploitationAddWindow(string openMode, Technic model)
        {
            this.WindowStartupLocation = System.Windows.WindowStartupLocation.CenterScreen;
            InitializeComponent();
            this.openMode = openMode;
            this.model = model;

            if (openMode == "Изменить")
            {
                //labelOutputLastnameFirstnamePatronymic.Content = model.Name;
                textboxName.Text = model.Name;
                textboxClassObjectOperation.Text = model.ClassObjectOperation.Name;
                textboxBrandEquipment.Text = model.BrandEquipment.Name;
                textboxInventoryNumber.Text = model.InventoryNumber;
                textboxIdentificationNumber.Text = model.IdentificationNumber;
                textboxVehicleManagementСategory.Text = model.VehicleManagementCategory.Name;
                textboxStateRegistrationMark.Text = model.StateRegistrationMark;
                dataPickerYearRelease.SelectedDate = model.YearRelease;
            }
        }
        void ChangeAndEmployee()
        {
            if (openMode == "Добавить")
            {
                try
                {

                        NpgsqlCommand cmd = new NpgsqlCommand("insert into \"Technic\" (\"name\",\"id_type_equipment\",\"id_brand_equipment\",\"inventory_number\",\"identification_number\",\"id_Management_category\",\"state_registration_mark\",\"year_relise\" ) " +
                                                         "values(@name,@id_type_equipment,@id_brand_equipment,@inventory_number,@identification_number,@id_Management_category,@state_registration_mark,@year_relise)",
                                                         DataBase.newConnection);
                        cmd.Parameters.Add(new NpgsqlParameter("@name", textboxName.Text));
                        cmd.Parameters.Add(new NpgsqlParameter("@id_type_equipment", model.IDClassObjectOperation));
                        cmd.Parameters.Add(new NpgsqlParameter("@id_brand_equipment", model.IDBrandEquipment));
                        cmd.Parameters.Add(new NpgsqlParameter("@inventory_number", textboxInventoryNumber.Text));
                        cmd.Parameters.Add(new NpgsqlParameter("@identification_number", textboxIdentificationNumber.Text));
                        cmd.Parameters.Add(new NpgsqlParameter("@id_Management_category", model.IDVehicleManagementСategory));
                        cmd.Parameters.Add(new NpgsqlParameter("@state_registration_mark",textboxStateRegistrationMark.Text));
                        cmd.Parameters.Add(new NpgsqlParameter("@year_relise", dataPickerYearRelease.SelectedDate));
                        cmd.ExecuteNonQuery();

                        MessageBox.Show("Данные успешно сохранены!", "Сообщение", MessageBoxButton.OK, MessageBoxImage.Information);
                        Close();
                    
                    
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message, ex.GetType().ToString(), MessageBoxButton.OK, MessageBoxImage.Error);
                }

            }
            else if (openMode == "Изменить")
            {
                Title = "Изменить карточку сотрудника";
                try
                {
                    NpgsqlCommand cmd = new NpgsqlCommand("update \"Technic\" SET \"name\" = @name,\"id_type_equipment\"=@id_type_equipment," +
                        "\"id_brand_equipment\"=@id_brand_equipment,\"inventory_number\"=@inventory_number,\"identification_number\"=@identification_number,\"id_Management_category\" = @id_Management_category," +
                        "\"state_registration_mark\"=@state_registration_mark,\"year_relise\"=@year_relise  WHERE \"id\" = @id",
                       DataBase.newConnection);
                    cmd.Parameters.Add(new NpgsqlParameter("@id", model.ID));
                    cmd.Parameters.Add(new NpgsqlParameter("@name", textboxName.Text));
                    cmd.Parameters.Add(new NpgsqlParameter("@id_type_equipment", model.IDClassObjectOperation));
                    cmd.Parameters.Add(new NpgsqlParameter("@id_brand_equipment", model.IDBrandEquipment));
                    cmd.Parameters.Add(new NpgsqlParameter("@inventory_number", textboxInventoryNumber.Text));
                    cmd.Parameters.Add(new NpgsqlParameter("@identification_number", textboxIdentificationNumber.Text));
                    cmd.Parameters.Add(new NpgsqlParameter("@id_Management_category", model.IDVehicleManagementСategory));
                    cmd.Parameters.Add(new NpgsqlParameter("@state_registration_mark", textboxStateRegistrationMark.Text));
                    cmd.Parameters.Add(new NpgsqlParameter("@year_relise", dataPickerYearRelease.SelectedDate));
                    cmd.ExecuteNonQuery();

                    MessageBox.Show("Данные успешно изменены!", "Сообщение", MessageBoxButton.OK, MessageBoxImage.Information);
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message, ex.GetType().ToString(), MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
            //DialogResult = false;
        }

        private void buttonRecord_Click(object sender, RoutedEventArgs e)
        {
            ChangeAndEmployee();
        }

        private void buttinObjectExploatationSelect_Click(object sender, RoutedEventArgs e)
        {
            ClassObjectOperationWindow classObjectOperation = new ClassObjectOperationWindow();
            classObjectOperation.ShowDialog();

            if (classObjectOperation.DialogResult == true)
            {
                model.IDClassObjectOperation = classObjectOperation.selectedItem.ID;
                textboxClassObjectOperation.Text = model.ClassObjectOperation.Name;
            }
        }

        private void buttinMarkaSelect_Click(object sender, RoutedEventArgs e)
        {
            BrandEquipmentWindow brandEquipmentWindow = new BrandEquipmentWindow();
            brandEquipmentWindow.ShowDialog();

            if (brandEquipmentWindow.DialogResult == true)
            {
                model.IDBrandEquipment = brandEquipmentWindow.selectedItem.ID;
                textboxBrandEquipment.Text = model.BrandEquipment.Name;
            }
        }

        private void buttinCategorySelect_Click(object sender, RoutedEventArgs e)
        {
            VehicleManagementCategoryWindow vehicleManagementCategoryWindow = new VehicleManagementCategoryWindow();
            vehicleManagementCategoryWindow.ShowDialog();

            if (vehicleManagementCategoryWindow.DialogResult == true)
            {
                model.IDVehicleManagementСategory = vehicleManagementCategoryWindow.selectedItem.ID;
                textboxVehicleManagementСategory.Text = model.VehicleManagementCategory.Name;
            }
        }
    }
}
